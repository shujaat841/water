import streamlit as st
import pickle

# Load the trained model
try:
    with open('Water_Quality_Prediction_System.pkl', 'rb') as file:
        model = pickle.load(file)
except Exception as e:
    st.error(f"❌ Failed to load model: {e}")
    st.stop()

# Define prediction function
def predict_water_quality(features):
    prediction = model.predict([features])[0]
    return 'Safe' if prediction == 0 else 'Unsafe'

# Streamlit UI
def main():
    st.set_page_config(page_title="Water Quality Predictor", layout="wide")
    st.title("🚰 Automated Water Quality Prediction System")

    st.markdown("### Please enter the chemical properties of the water sample:")

    # Input fields
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        aluminium = st.number_input("Aluminium", 0.0, 5.0, step=0.1)
        ammonia = st.number_input("Ammonia", 0.0, 30.0, step=0.1)
        arsenic = st.number_input("Arsenic", 0.0, 1.0, step=0.1)
        lead = st.number_input("Lead", 0.0, 1.0, step=0.1)
        nitrates = st.number_input("Nitrates", 0.0, 50.0, step=0.1)

    with col2:
        barium = st.number_input("Barium", 0.0, 5.0, step=0.1)
        cadmium = st.number_input("Cadmium", 0.0, 1.0, step=0.1)
        chloramine = st.number_input("Chloramine", 0.0, 10.0, step=0.1)
        nitrites = st.number_input("Nitrites", 0.0, 10.0, step=0.1)
        perchlorate = st.number_input("Perchlorate", 0.0, 100.0, step=0.1)

    with col3:
        chromium = st.number_input("Chromium", 0.0, 1.0, step=0.1)
        copper = st.number_input("Copper", 0.0, 5.0, step=0.1)
        bacteria = st.number_input("Bacteria", 0.0, 1.0, step=0.1)
        radium = st.number_input("Radium", 0.0, 10.0, step=0.1)
        silver = st.number_input("Silver", 0.0, 1.0, step=0.1)

    with col4:
        viruses = st.number_input("Viruses", 0.0, 1.0, step=0.1)
        uranium = st.number_input("Uranium", 0.0, 100.0, step=0.1)

    if st.button("Predict Water Quality"):
        # Collect input features in order
        features = [
            aluminium, ammonia, arsenic, barium, cadmium, chloramine, chromium, copper,
            bacteria, viruses, lead, nitrates, nitrites, perchlorate, radium, silver, uranium
        ]

        try:
            result = predict_water_quality(features)
            st.success(f"✅ The water sample is predicted to be: **{result}**")
        except Exception as e:
            st.error(f"Prediction failed: {e}")

if __name__ == "__main__":
    main()
